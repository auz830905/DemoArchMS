@page "/lessonprofesores"

@using System.Net.Http.Headers
@using Newtonsoft.Json
@using System.Net
@using Lesson
@using WebApp.Helpers
@using global::Auth.DTOs
@using global::Shared.DTOs 
@using Static

@inject HttpClient Http
@inject IJSRuntime js
@inject IToastService toastService
@inject IConfiguration configuration

@attribute [Authorize(Roles = "adminclases, admin")]

<AuthorizeView>
    <Authorized>
        <PageTitle>Asociar Profesores a Clases</PageTitle>
        <h1>Asignar Clases a Profesores</h1>
        <hr />
        <br />

        @if (profesores == null)
        {
            <div class="alert alert-info">Cargando Reporte...</div>
        }
        else
        {
            <div class="form-group">
                <div>
                    <select @onchange="@((ChangeEventArgs e) => LoadClasesNotAssign(e))" class="form-control">
                        @if (profesores.Count != 0)
                        {
                            <option value="">Seleccione un profesor</option>
                            @foreach (var profesor in profesores)
                            {
                                <option value="@profesor.CI">@profesor.Nombre @profesor.Apellidos</option>
                            }
                        }
                        else
                        {
                            <option value="">No hay profesores insertados</option>
                        }
                    </select>
                </div>
            </div>
        }
            <br />           

        @if (clasesSelect != null)
        {
            <div class="form-group">
                <div>
                    <select @bind="IdClaseSelected" class="form-control">
                        @if (clasesSelect.Count != 0 && clasesSelect != null)
                        {
                            <option value="">Seleccione una clase</option>
                            @foreach (var clase in clasesSelect)
                            {
                                <option value="@clase.Id">@clase.Nombre</option>
                            }
                        }
                        else
                        {
                            <option value="">No hay clases insertadas</option>
                        }
                    </select>
                </div>
            </div>
        }
        else
        {
            <div class="form-group">
                <div>
                    <select class="form-control">               
                     <option value="">Seleccione una clase</option>                    
                    </select>
                </div>
            </div>
        }
            <br/>

            <button class="btn btn-primary" @onclick="@(() => AddClaseProfesor())">
                <span class="oi oi-check"></span>
                Añadir clase a profesor
            </button>

            <br/>

           <table class="table">
                <thead>
                    <tr>
                        <th>Identificador</th>
                        <th>Nombre Clase</th>
                        <th>Acciones</th>
                    </tr>
                </thead>
                <tbody>
                    @if (clasesTable != null && clasesTable.Count != 0)
                    {
                        @foreach (var clase in clasesTable)
                        {
                            <tr>
                                <td>@clase.Id</td>
                                <td>@clase.Nombre</td>
                                <td>
                                    <button class="btn btn-outline-danger" @onclick="@(() => DeleteClase(clase, CiSelected!))">
                                        <span class="oi oi-trash"></span>
                                    </button>
                                </td>
                            </tr>
                        }
                    }
                    else
                    {
                        <tr>
                            <td colspan="3">
                                <center><b>No hay datos para mostrar</b></center>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
    </Authorized>
</AuthorizeView>
    
@code {
    ModalOptions options = new ModalOptions() 
    { 
        DisableBackgroundCancel = true 
    };

    private List<Profesor>? profesores;
    private List<Clase>? clasesTable;
    private List<Clase>? clasesSelect;
    private string? CiSelected = string.Empty;
    private string? IdClaseSelected = string.Empty;
    private ChangeEventArgs? e;
    [CascadingParameter] public IModalService Modal { get; set; } = default!;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var url = configuration.GetValue<string>("ApiGatewayUrl");

            Http.DefaultRequestHeaders.Accept.Clear();
            Http.DefaultRequestHeaders.Accept.Add(new MediaTypeWithQualityHeaderValue("application/json"));
            
            ServicePointManager.SecurityProtocol = SecurityProtocolType.Tls12 | SecurityProtocolType.Tls11 | SecurityProtocolType.Tls;
            
            var token = JsonConvert.DeserializeObject<UserToken>(await js.GetFromLocalStorage("TOKENKEY"));
            
            Http.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", token!.Token);

            profesores = await Http.GetFromJsonAsync<List<Profesor>>($"{url}{Endpoints.ProfesoresList}");           
        }
        catch (Exception)
        {
            profesores = new List<Profesor>();
            clasesSelect = new List<Clase>();    
        }
    }

    protected async void LoadClasesNotAssign(ChangeEventArgs e)
    {
        this.e = e;
        CiSelected = (e.Value != null) ? e.Value.ToString() : "";
        await LoadClasesNotAsignedToProfesor();
        await InvokeAsync(StateHasChanged);
    }

    protected async Task LoadClasesNotAsignedToProfesor()
    {
        try
        {
            var url = configuration.GetValue<string>("ApiGatewayUrl");

            if (clasesTable != null)
                clasesTable?.Clear();

            if (clasesSelect != null)
                clasesSelect?.Clear();

            clasesSelect = await Http.GetFromJsonAsync<List<Clase>>($"{url}{Endpoints.ClasesNotAssinedProfesor}{CiSelected}/clasesnotassign");
            clasesTable = await Http.GetFromJsonAsync<List<Clase>>($"{url}{Endpoints.ClasesByProfesor}{CiSelected}");
        }
        catch (Exception)
        {
            clasesTable = new List<Clase>();
            clasesSelect = new List<Clase>();
        }
    }

    protected async Task DeleteClase(Clase clase, string Ci)
    {
        var parameters = new ModalParameters()
        .Add(nameof(DeleteClaseAProfesor.clase), clase)
        .Add(nameof(DeleteClaseAProfesor.Ci), Ci);

        var deleteProfesor = Modal.Show<DeleteClaseAProfesor>($"Desea eliminar la clase {clase.Nombre} al profesor?", parameters, options);
        var result = await deleteProfesor.Result;

        if (result.Confirmed)
            LoadClasesNotAssign(this.e!);
        else
            await OnInitializedAsync();    
    }

    protected async Task AddClaseProfesor()
    {
        try
        {
            if (!string.IsNullOrEmpty(CiSelected) && !string.IsNullOrEmpty(IdClaseSelected))
            {
                var url = configuration.GetValue<string>("ApiGatewayUrl");

                var postClaseProfesorBody = new { Ci = CiSelected, IdClase = IdClaseSelected };            
                using var response = await Http.PostAsJsonAsync($"{url}{Endpoints.AddClaseProfesor}{CiSelected}/{IdClaseSelected}", postClaseProfesorBody);           
                LoadClasesNotAssign(this.e!);
                toastService.ShowSuccess("Clase añadida correctamente al profesor");  
            }
            else
            {
                await js.InvokeAsync<bool>("alert", $"Debe seleccionar profesor y clase");
            }

        }
        catch(Exception)
        {
            toastService.ShowError("No se puede establecer conexión con el servidor");
        }
    }
}