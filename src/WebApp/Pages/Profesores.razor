@page "/profesores"

@using global::Shared.DTOs
@using Profe
@using Static
@using Newtonsoft.Json; 

@inject NavigationManager _navManager
@inject HttpClient Http
@inject IJSRuntime js
@inject IToastService toastService

<PageTitle>Gestionar Profesores</PageTitle>

<h1>Gestionar Profesores</h1>
<hr/>
<br />

<button @onclick="@(() => ShowModalAdd())" class="btn btn-primary">
    <span class="oi oi-plus"></span>
    Añadir Profesor
</button>

<br />
<br />

@if (profesores == null)
{
    <div class="alert alert-info">Cargando Profesores...</div>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Carné Identidad</th>
                <th>Nombre</th>
                <th>Apellidos</th>
                <th>Acciones</th>
            </tr>
        </thead>
        <tbody>
            @if (profesores.Count != 0)
            {
                @foreach (var profesor in profesores)
                {
                    <tr>
                        <td>@profesor.CI</td>
                        <td>@profesor.Nombre</td>
                        <td>@profesor.Apellidos</td>
                        <td>                           
                             <button class="btn btn-outline-warning" @onclick="@(() => ShowModalUpdate(profesor))">
                                <span class="oi oi-pencil"></span>
                            </button>
                             <button class="btn btn-outline-danger" @onclick="@(() => DeleteProfesor(profesor))">
                                <span class="oi oi-trash"></span>
                            </button>
                        </td>                       
                    </tr>
                }
            }
            else
            {
                <tr>
                    <td colspan="4">
                        <center><b>No hay datos para mostrar</b></center>
                    </td>
                </tr>    
            }
         </tbody>
    </table>
}

@code {
    ModalOptions options = new ModalOptions() 
    { 
        DisableBackgroundCancel = true 
    };

    [CascadingParameter] public IModalService Modal { get; set; } = default!;

    private List<Profesor>? profesores;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            profesores = await Http.GetFromJsonAsync<List<Profesor>>($"{Endpoints.ProfesoresList}");
        }
        catch(Exception)
        {
            profesores = new List<Profesor>();    
        }
    }       

    protected async Task ShowModalAdd()
    {
        var addProfesor = Modal.Show<Create>("Agregar Profesor", options: options);
        var result = await addProfesor.Result;

        if (result.Confirmed)
        {
            await OnInitializedAsync();
        }       
    }

    protected async Task DeleteProfesor(Profesor profesor)
    {
         var parameters = new ModalParameters()
        .Add(nameof(Update.profesor), profesor);

        var deleteProfesor = Modal.Show<Delete>($"Desea eliminar el Profesor {profesor.Nombre} {profesor.Apellidos}?", parameters, options);
        var result = await deleteProfesor.Result;

        await OnInitializedAsync();    
    }

    protected async Task ShowModalUpdate(Profesor profesor)
    {
        var parameters = new ModalParameters()
        .Add(nameof(Update.profesor), profesor);

        var updateProfesor = Modal.Show<Update>($"Actualizar Profesor {profesor.Nombre} {profesor.Apellidos}", parameters, options);
        var result = await updateProfesor.Result;

        await OnInitializedAsync();          
    }
}

