@page "/profe/update/{Ci}"

@using global::Shared.DTOs
@using Static

@inject HttpClient Http
@inject NavigationManager _navManager
@inject IJSRuntime js

<PageTitle>Actualizar Profesor</PageTitle>

<h1>Actualizar profesor</h1>
<hr/>
<br />

<EditForm Model="@profesor" OnSubmit="UpdateProfesor">
   @* <DataAnnotationsValidator/>
    <ValidationSummary />*@
    
    <div class="form-group">
        <label>Nombre: </label>
        <div>
            <InputText @bind-Value="@profesor!.Nombre" class="form-control"/>           
        </div>
    </div>

    <div class="form-group">
        <label>Apellidos: </label>
        <div>
            <InputText @bind-Value="@profesor!.Apellidos" class="form-control"/>            
        </div>
    </div>

    <br />
    <button type="submit" class="btn btn-primary">
        <span class="oi oi-check"></span>
        Actualizar Profesor
    </button>
</EditForm>

@code {
    [Parameter] 
    public string Ci { get; set; }
    protected Profesor profesor = new Profesor();

    protected override async Task OnInitializedAsync()
    {
        profesor = await Http.GetFromJsonAsync<Profesor>($"{Endpoints.Profesor}{Ci}");     
    }

    private async Task UpdateProfesor()
    {
        try
        {
            var url = $"{Endpoints.UpdateProfesor}";
            using var response = await Http.PutAsJsonAsync(url, profesor);
            _navManager.NavigateTo("/profesores");
        }
        catch(Exception)
        {
            
        }
    }
}
