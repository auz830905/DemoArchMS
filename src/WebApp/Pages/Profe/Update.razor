@page "/profe/update/"

@using global::Shared.DTOs
@using Static
@using Newtonsoft.Json; 

@inject HttpClient Http
@inject NavigationManager _navManager
@inject IJSRuntime js
@inject IToastService toastService

<PageTitle>Actualizar Profesor</PageTitle>

<EditForm Model="@profesor" OnValidSubmit = "UpdateProfesor">
    <DataAnnotationsValidator/>
    @*<ValidationSummary />*@
    
    <div class="form-group">
        <label>Nombre: </label>
        <div>
            <InputText @bind-Value="@profesor!.Nombre" class="form-control"/>    
            <ValidationMessage For="@(() => profesor.Nombre)" />
        </div>
    </div>

    <div class="form-group">
        <label>Apellidos: </label>
        <div>
            <InputText @bind-Value="@profesor!.Apellidos" class="form-control"/>  
            <ValidationMessage For="@(() => profesor.Apellidos)" />
        </div>
    </div>

    <br />
    <button type="submit" class="btn btn-primary">
        <span class="oi oi-check"></span>
        Actualizar Profesor
    </button>
</EditForm>

@code {

    [Parameter] public Profesor profesor { get; set; }

    [CascadingParameter] BlazoredModalInstance BlazoredModal { get; set; } = default!;

    private async Task UpdateProfesor()
    {
        try
        {
            var url = $"{Endpoints.UpdateProfesor}";
            using var response = await Http.PutAsJsonAsync(url, profesor);

            if (response.IsSuccessStatusCode)
            {
               await BlazoredModal.CloseAsync(ModalResult.Ok("Ok"));
               toastService.ShowSuccess("Profesor actualizado correctamente");  
            }
            else
            {
                var error = JsonConvert.DeserializeObject<Error>(response.Content.ReadAsStringAsync().Result);
                toastService.ShowError(error?.Message);  
            }              
        }
        catch(Exception)
        {
            toastService.ShowError("No se puede establecer conexión con el servidor");
        }
    }    
}
