@page "/profe/create"

@using global::Shared.DTOs
@using Static
@using Newtonsoft.Json; 

@inject HttpClient Http
@inject NavigationManager _navManager
@inject IToastService toastService

<PageTitle>Añadir Profesores</PageTitle>

<h1>Añadir profesor</h1>
<hr/>
<br />

<EditForm Model="@profesor" OnSubmit="AddProfesor">
   @* <DataAnnotationsValidator/>
    <ValidationSummary />*@

    <div class="form-group">
        <label>CI: </label>
        <div>
            <InputText @bind-Value="@profesor.CI" class="form-control"/>
        </div>
    </div>

    <div class="form-group">
        <label>Nombre: </label>
        <div>
            <InputText @bind-Value="@profesor.Nombre" class="form-control"/>           
        </div>
    </div>

    <div class="form-group">
        <label>Apellidos: </label>
        <div>
            <InputText @bind-Value="@profesor.Apellidos" class="form-control"/>            
        </div>
    </div>

    <br />
    <button type="submit" class="btn btn-primary">
        <span class="oi oi-check"></span>
        Crear Profesor
    </button>
</EditForm>

@code {
    Profesor profesor = new Profesor();

    private async Task AddProfesor()
    {
        try
        {
            var postProfesorBody = new { ci = profesor.CI, nombre = profesor.Nombre, apellidos = profesor.Apellidos };            
            using var response = await Http.PostAsJsonAsync($"{Endpoints.AddProfesor}", postProfesorBody);

            if (response.IsSuccessStatusCode)
            {
                _navManager.NavigateTo("/profesores");
                toastService.ShowSuccess("Profesor agregado correctamente");  
            }
            else
            {
                var error = JsonConvert.DeserializeObject<Error>(response.Content.ReadAsStringAsync().Result);
                toastService.ShowError(error?.Message);  
            }                      
        }
        catch(Exception)
        {
           toastService.ShowError("Error 500");
        }
    }
}
